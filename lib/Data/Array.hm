-----------------------------------------------------------------------------
-- |
-- Module      :  Data.Array
-- Copyright   :  (c) 2020 EMQ Technologies Co., Ltd.
-- License     :  BSD-style (see the LICENSE file)
--
-- Maintainer  :  Feng Lee, feng@emqx.io
--                Yang M, yangm@emqx.io
-- Stability   :  experimental
-- Portability :  portable
--
-- The Array datatype.
--
-----------------------------------------------------------------------------
module Data.Array where

import Data.Eq (class Eq, (==))
import Data.Ord (class Ord, compare)
import Data.Show (class Show, show)
import Data.Functor (class Functor)
import Data.Foldable (class Foldable, foldr)

import Data.Monoid (mempty)
import Data.Semigroup ((<>))
import Data.String ((++))

import Foreign (ffi1, ffi2, ffi3)

foreign import data Array :: Type -> Type

{- TODO: typeclass
Traversable
-}

instance Eq t => Eq (Array t) where
  eq a b = toList a == toList b

instance Ord t => Ord (Array t) where
  compare a b = compare (toList a) (toList b)

-- TODO: Show List
instance Show t => Show (Array t) where
  show a = "[" ++ showList (toList a) ++ "]"
    where showList [] = ""
          showList [x | []] = show x
          showList [x | xs] = show x ++ ", "

instance Functor Array where
  map = ffi2 :array :map

instance Foldable Array where
  foldl = ffi3 :array :foldl
  foldr = ffi3 :array :foldr
  foldMap f = foldr (\x acc -> f x <> acc) mempty

{- TODO:
Construct
Fold
Index and Access
Accumulate
Updates
-}

{- TODO: functions
default/1
fix/1
from_orddict/1
from_orddict/2
get/2
is_array/1
is_fix/1
new/0
new/1
new/2
relax/1
reset/2
resize/1
resize/2
set/3
size/1
sparse_foldl/3
sparse_foldr/3
sparse_map/2
sparse_size/1
sparse_to_list/1
sparse_to_orddict/1
to_orddict/1
-}

fromList :: forall a. [a] -> Array a
fromList = ffi1 :array :from_list

fromListWith :: forall a. [a] -> a -> Array a
fromListWith = ffi2 :array :from_list

toList :: forall a. Array a -> [a]
toList = ffi1 :array :to_list
