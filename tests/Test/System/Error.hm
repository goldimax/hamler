module Test.System.Error where

import Test.QuickCheck (TestGroup(..), TestResult, quickCheck1)
import Prelude
import System.Error as E

propCatchE1 :: IO Bool
propCatchE1 = do
  r <- E.catchException (return "2") (\x -> return $ showAny x)
  return $ r == "2"

errorFun1 :: [Integer] -> IO String
errorFun1 f = return $ show $ map (\x -> x / 0) f

propCatchE2 :: [Integer] -> IO Bool
propCatchE2 f = do
  r <- E.catchException (errorFun1 f) (\x -> return $ showAny x)
  return $ r == "badarith"

errorFun2 :: IO String
errorFun2 = E.throw 2

propTryThrow :: IO Bool
propTryThrow = do
  r <- (E.try errorFun2 :: IO (Either Integer String))
  return $ r == Left 2

test :: TestGroup (Integer -> IO TestResult)
test = Exe [ quickCheck1 "catchE1" propCatchE1
           , quickCheck1 "catchE2" propCatchE2
           , quickCheck1 "try catch" propTryThrow
           ]
